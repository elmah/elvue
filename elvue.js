// Generated by LiveScript 1.3.1
/*
 * ELVUE - Reports for ELMAH Error Logs
 * Copyright (c) 2011 Atif Aziz. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function(){
  var id, ref$, formatSimpleErrorTypeName;
  id = function(it){
    return it;
  };
  (ref$ = Number.prototype).formatInt == null && (ref$.formatInt = (function(){
    switch (false) {
    case Number.prototype.formatMoney == null:
      return function(f){
        f == null && (f = function(it){
          return it.formatMoney(0);
        });
        return function(){
          return f(this);
        };
      }();
    default:
      return function(){
        return this.toString();
      };
    }
  }()));
  formatSimpleErrorTypeName = function(name){
    var m, last;
    m = name.match(/^([a-z0-9]+\.)+?([a-z0-9]*exception)$/i);
    switch (false) {
    case m != null:
      return name;
    default:
      last = m.pop();
      return last.slice(0, -'exception'.length) || last;
    }
  };
  google.load('visualization', '1', {
    packages: ['corechart']
  });
  google.setOnLoadCallback(function(global, config, vis){
    var ref$, iframe;
    global == null && (global = this);
    config == null && (config = (ref$ = this.config) != null
      ? ref$
      : {});
    vis == null && (vis = document.getElementById('visualization', iframe = document.getElementById('elf')));
    return function(){
      var x$, dt, chart, location, ref$, src, limit, loadedCount, byType;
      x$ = dt = new google.visualization.DataTable();
      x$.addColumn('string', 'Error');
      x$.addColumn('number', 'Count');
      chart = new google.visualization.PieChart(vis);
      if (config.title) {
        document.title = config.title;
      } else {
        location = window.location;
        if ((ref$ = location.protocol) === 'http:' || ref$ === 'https:') {
          document.title += " for \u201c" + location.hostname + "\u201d";
        }
      }
      $('h1').text(document.title);
      src = function(src){
        src == null && (src = config.src || 'elmah.axd/download');
        return src + "?format=html-jsonp&callback=parent.onerrors";
      }();
      limit = +config.limit;
      if (limit > 0) {
        src += "&limit=" + limit;
      }
      iframe.src = src;
      loadedCount = 0;
      byType = {};
      global.onerrors == null && (global.onerrors = function(data){
        var errors, label, i$, ref$, len$, err, type, entry, tr, td, parent, hrefs, a, row, prev, next;
        loadedCount += data.errors.length;
        $('table#errors caption').text(loadedCount < data.total
          ? loadedCount.formatInt() + " of " + data.total.formatInt() + " errors"
          : data.total.formatInt() + " errors");
        errors = $('#errors');
        label = function(labeling){
          labeling == null && (labeling = config.labeling);
          switch (false) {
          case typeof labeling !== 'function':
            return labeling;
          case labeling !== 'words':
            return function(type){
              return $.trim(type.replace(/([a-z])([A-Z])/g, '$1 $2')).toLowerCase();
            };
          default:
            return id;
          }
        }();
        for (i$ = 0, len$ = (ref$ = $(data.errors)).length; i$ < len$; ++i$) {
          err = ref$[i$];
          type = label(formatSimpleErrorTypeName(
          err.type), err);
          entry = byType[type] || {
            count: 0,
            i: 0,
            e: null
          };
          entry.count += 1;
          if (entry.e != null) {
            entry.e.text(
            entry.count.formatInt());
          } else {
            entry.i = dt.getNumberOfRows();
            dt.addRows(1);
            dt.setValue(entry.i, 0, type);
            tr = $('<tr>');
            td = $('<td>').appendTo(tr);
            $('<abbr>').attr('title', err.type).text(type).appendTo(td);
            parent = td = $('<td>').appendTo(tr);
            hrefs = $.grep(err.hrefs, fn$);
            if (hrefs.length) {
              parent = a = $('<a target="_blank">').attr('href', hrefs[0].href).appendTo(td);
            }
            $('<abbr>').addClass('timeago').attr('title', err.time.replace(/\.\d{1,3}Z$/, 'Z')).text('' + new Date(Date.parse(err.time))).appendTo(parent);
            entry.e = $('<td>').addClass('num ').text(entry.count.formatInt()).appendTo(tr);
            tr.appendTo(errors);
            byType[type] = entry;
          }
          row = entry.e.closest('tr');
          for (;;) {
            prev = parseInt(
            row.prev().children('td:last-child').text().replace(',', ''));
            if (isNaN(prev) || entry.count <= prev) {
              break;
            }
            row.prev().before(row);
          }
          for (;;) {
            row = entry.e.closest('tr');
            next = parseInt(
            row.next().children('td:last-child').text().replace(',', ''));
            if (isNaN(next) || entry.count >= next) {
              break;
            }
            row.next().after(row);
          }
          dt.setValue(entry.i, 1, entry.count);
        }
        $('.timeago').timeago();
        chart.draw(dt, {
          is3D: true,
          width: 500,
          height: 333,
          chartArea: {
            left: 10,
            top: 10,
            width: '90%',
            height: '90%'
          }
        });
        function fn$(e){
          return e && e.type === 'text/html';
        }
      });
    };
  }());
}).call(this);
