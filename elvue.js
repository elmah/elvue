// Generated by LiveScript 1.3.1
/*
 * ELVUE - Reports for ELMAH Error Logs
 * Copyright (c) 2011 Atif Aziz. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function(){
  var id, $, formatSimpleErrorTypeName, app;
  id = function(it){
    return it;
  };
  $ == null && ($ = function(it){
    return angular.element(
    typeof it === 'string' ? document.querySelector(it) : it);
  });
  formatSimpleErrorTypeName = function(name){
    var m, last;
    m = name.match(/^([a-z0-9]+\.)+?([a-z0-9]*exception)$/i);
    switch (false) {
    case m != null:
      return name;
    default:
      last = m.pop();
      return last.slice(0, -'exception'.length) || last;
    }
  };
  app = angular.module('app', ['angularMoment']).constant('angularMomentConfig', {
    preprocess: 'utc'
  });
  app.directive('googleChart', function(){
    return {
      restrict: 'A',
      link: function($scope, $elem, $attr){
        var ngModel, options, chart;
        ngModel = $scope[$attr.ngModel];
        if (ngModel == null) {
          return;
        }
        options = {};
        if (ngModel.title) {
          options.title = ngModel.title;
        }
        chart = new google.visualization[$attr.googleChart]($elem[0]);
        chart.draw(ngModel.dataTable, options);
        return $scope.$watch($attr.ngModel + "", function(){
          return chart.draw(ngModel.dataTable, ngModel.config);
        }, true);
      }
    };
  });
  app.directive('elmahDownload', function(){
    return {
      restrict: 'A',
      link: function($scope, $elem, $attr){
        (function(src, id){
          var callback;
          if (src == null) {
            return;
          }
          callback = 'onerrors' + id;
          $($elem).attr('src', src.replace(/=CALLBACK(&|$)/, "=parent." + encodeURIComponent(callback)));
          window[callback] == null && (window[callback] = function(data){
            $scope.$apply(function(){
              if (typeof $scope.onerrors == 'function') {
                $scope.onerrors(data);
              }
            });
          });
        }.call(this, $scope.src, $scope.$id));
      }
    };
  });
  app.controller('page', new Array('$scope', 'config', function($scope, config){
    var x$, dt, y$, errors, byType, label;
    x$ = dt = new google.visualization.DataTable();
    x$.addColumn('string', 'Error');
    x$.addColumn('number', 'Count');
    $scope.gc = {
      dataTable: dt,
      config: {
        is3D: true,
        width: 500,
        height: 333,
        chartArea: {
          left: 10,
          top: 10,
          width: '90%',
          height: '90%'
        }
      }
    };
    $scope.src = (function(src, limit){
      return (src + "?format=html-jsonp&callback=CALLBACK") + (limit > 0 ? "&limit=" + limit : '');
    }.call(this, config.src || 'elmah.axd/download', +config.limit));
    y$ = $scope;
    y$.callbackCount = 0;
    y$.loadedCount = 0;
    y$.totalCount = 0;
    y$.errors = errors = [];
    y$.byType = byType = {};
    y$.sort = function(key){
      if (key === this.sortKey) {
        this.sortDescending = !this.sortDescending;
      } else {
        this.sortKey = key;
        this.sortDescending = key !== 'type';
      }
    };
    y$.sort('count');
    label = function(labeling){
      labeling == null && (labeling = config.labeling);
      switch (false) {
      case typeof labeling !== 'function':
        return labeling;
      case labeling !== 'words':
        return function(type){
          return $.trim(type.replace(/([a-z])([A-Z])/g, '$1 $2')).toLowerCase();
        };
      default:
        return id;
      }
    }();
    return $scope.onerrors = function(data){
      var i$, ref$, len$, err, type, entry, ref1$, h;
      $scope.callbackCount++;
      $scope.totalCount = data.total;
      $scope.loadedCount += data.errors.length;
      for (i$ = 0, len$ = (ref$ = data.errors).length; i$ < len$; ++i$) {
        err = ref$[i$];
        type = label(formatSimpleErrorTypeName(
        err.type), err);
        if ((entry = byType[type]) == null) {
          errors.push(entry = byType[type] = {
            type: type,
            type$: err.type,
            count: 0,
            i: errors.length,
            time: new Date(Date.parse(err.time)),
            time$: err.time.replace(/\.\d{1,3}Z$/, 'Z'),
            href: (ref1$ = (fn$())[0]) != null ? ref1$.href : void 8
          });
          dt.addRows(1);
          dt.setValue(entry.i, 0, type);
        }
        dt.setValue(entry.i, 1, ++entry.count);
      }
      function fn$(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = err.hrefs).length; i$ < len$; ++i$) {
          h = ref$[i$];
          if ((h != null ? h.href : void 8) != null && h.type === 'text/html') {
            results$.push(h);
          }
        }
        return results$;
      }
    };
  }));
  google.setOnLoadCallback(function(config){
    var ref$;
    config == null && (config = (ref$ = this.config) != null
      ? ref$
      : {});
    return function(){
      var location, ref$;
      if (config.title) {
        document.title = config.title;
      } else {
        location = window.location;
        if ((ref$ = location.protocol) === 'http:' || ref$ === 'https:') {
          document.title += " for \u201c" + location.hostname + "\u201d";
        }
      }
      $('h1').text(document.title);
      app.value('config', config);
      angular.bootstrap(document.body, ['app']);
    };
  }());
  google.load('visualization', '1', {
    packages: ['corechart']
  });
}).call(this);
